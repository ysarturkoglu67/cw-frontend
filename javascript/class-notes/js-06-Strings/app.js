console.log("***Strings****");

// ?=========================================================
// ?                 STRINGLER
// ?=========================================================

//! String TanÄ±mlama
const str1 = "Clarusway";
const str2 = `Hello5`;

console.log(typeof str2);

// String constructor ile String oluÅŸuturma
const str3 = new String("World");
console.log(typeof str2);

const str4 = "ğŸ«€";

//! Normalde primitive veri tiplerinin property veya metodu olmaz.
//! Ancak Javascript  otomatik olarak primitive String'leri String object lerine dÃ¶nÃ¼ÅŸtÃ¼rÃ¼r. Bu sayede, String object lerine ait olan
//! fonksiyonlar veya Ã¶zellikleri primitive string ile kullanmak
//! mÃ¼mkÃ¼n olur. AyrÄ±ca 2 tÃ¼r arasÄ±nda Ã§evrim yapmakta mÃ¼mkÃ¼ndÃ¼r.

/* ---------------------------------- */
/*     STRING YAPISI VE INDEXLEME     */
/* ---------------------------------- */

let kelime = "Clarusway";
kelime = "Bootcamp";
console.log(kelime[0]);
console.log(kelime[1]);
console.log(kelime[8]);

for (let i = 0; i < 8; i++) {
  console.log(kelime[i]);
}
// Stringler, parÃ§a olarak deÄŸiÅŸtiremezsiniz
//immutable
kelime[0] = "H";
console.log(kelime);

//! ************STRING PROPERTY ************
// Property bir stringin kendi Ã¶zelliÄŸidir bir method(fonksiyon) deÄŸildir
//parantez aÃ§Ä±p kapatmaya gerek yoktur

//? lenght
//Prototype

//! ************STRING METHODS ************
// charAt()             Returns the character at the specified index.
// charCodeAt()	        Returns the Unicode of the character at the specified index.
// concat()	            Joins two or more strings, and returns a new string.
// endsWith()	        Checks whether a string ends with a specified substring.
// fromCharCode()	    Converts Unicode values to characters.
// includes()	        Checks whether a string contains the specified substring.
// indexOf()	        Returns the index of the first occurrence of the specified value in a string.
// lastIndexOf()	    Returns the index of the last occurrence of the specified value in a string.
// localeCompare()	    Compares two strings in the current locale.
// match()	            Matches a string against a regular expression, and returns an array of all matches.
// repeat()	            Returns a new string which contains the specified number of copies of the original string.
// replace()	        Replaces the occurrences of a string or pattern inside a string with another string, and return a new string without modifying the original string.
// search()	             Searches a string against a regular expression, and returns the index of the first match.
// slice()	            Extracts a portion of a string and returns it as a new string.
// split()	            Splits a string into an array of substrings.
// startsWith()	        Checks whether a string begins with a specified substring.
// substr()	            Extracts the part of a string between the start index and a number of characters after it.
// substring()	        Extracts the part of a string between the start and end indexes.
// toLocaleLowerCase()	Converts a string to lowercase letters, according to host machine's current locale.
// toLocaleUpperCase()	Converts a string to uppercase letters, according to host machine's current locale.
// toLowerCase()	    Converts a string to lowercase letters.
// toString()	        Returns a string representing the specified object.
// toUpperCase()	    Converts a string to uppercase letters.
// trim()	            Removes whitespace from both ends of a string.
// valueOf()	        Returns the primitive value of a String object.

// *=========================================================
// *               lenght - Property
// *=========================================================

//? Lenght => Bir stringin boÅŸluklarda dahil kaÃ§ karakterden oluÅŸtuÄŸunu verir.

const metin = "ClaruswayğŸ˜˜";
let emoji = "ğŸ¤ª";
//Emojiler 2 karakter uzunluÄŸundadÄ±r.
console.log(metin.length);
console.log(emoji.length);

for (let i = 0; i < metin.length; i++) {
  console.log(metin[i]);
}

//! ************STRING METHODS ************
// String metodlarÄ± () kullanÄ±lÄ±r. (Arkaplanda fonksiyonlardÄ±r)
//? Chaining yani zincirleme olarak birden fazla metod birlikte kullanÄ±labilir.

// *=========================================================
// *   toLowerCase() toUpperCase() immutable=deÄŸiÅŸtirmez
// *=========================================================
//? Karakterleri kÃ¼Ã§Ã¼k harfe dÃ¶nÃ¼ÅŸtÃ¼rme => .toLowerCase()
// DeÄŸiÅŸim geÃ§icidir.Tamamen deÄŸiÅŸtirmiyor deÄŸiÅŸtirp kaydetmek istiyorsak yeni bir deÄŸere atamalÄ±yÄ±z
console.log(metin.toLowerCase());
let yeniMetin = metin.toLowerCase();
console.log(yeniMetin);

//? Karakterleri bÃ¼yÃ¼k harfe dÃ¶nÃ¼ÅŸtÃ¼rme => .toUpperCase()
console.log(metin.toUpperCase());

// let sehir = "Istanbul"
// console.log(sehir.toLocaleLowerCase("tr-TR"))
// console.log(sehir.toLowerCase())

/* ---------------------------------- */
/*    String BÄ°rleÅŸtirme yÃ¶ntemleri   */
/* ---------------------------------- */

//* + ile birleÅŸtirme
//* concat ile birleÅŸtirme
//* Template literal (``) ile birleÅŸtirme

let text1 = "Merhaba";
let text2 = "JavaScript";

console.log(text1 + " " + text2);

let text = "Merhaba";

text += " Harvey";
console.log(text);

// *=========================================================
// *               concat() immutable=deÄŸiÅŸtirmez
// *=========================================================
//concatanation

let s1 = "Yakarsa DÃ¼nyayÄ±";
let s2 = " Garipler yakar";

console.log(s1.concat(s2));

let s3 = s1.concat(s2);
console.log(s3);

// *=========================================================
// *               Template Literals
// *=========================================================

// ES6 ile tanÄ±tÄ±lan bu yÃ¶ntem, backtick iÅŸareti (`) kullanarak string birleÅŸtirmeyi kolaylaÅŸtÄ±rÄ±r ve deÄŸiÅŸkenleri doÄŸrudan string iÃ§inde kullanmanÄ±za olanak tanÄ±r.

let str5 = "Clarusway";
let str6 = "Merhaba";
// let isim = prompt("AdÄ±n ne?")

console.log("ali merhaba");

console.log(
  `Ali
Merhaba
nasÄ±lsÄ±n
Harveyden selamlar`.length
);

//!Heap-Stack Ã–rnek
// console.log(`${str5} ${str6} `)
// let a = 10
// let b = a
// console.log(b)
// a = 55
// console.log(b)
// let x = [1, 2, 3, 4, 5]
// let y = x;
// console.log(x[0])
// x[0]=55
// console.log(y)

//! String ParÃ§alama MetodlarÄ±
// split()
// substring()
// substr()
// slice()

// *=========================================================
// *                 split() immutable
// *=========================================================
// Stringi belirtilen ÅŸekilde parÃ§alara ayÄ±rÄ±r ve parÃ§alarÄ±nÄ± bir diziye aktarÄ±r
// str.split(seperator)
// saparator : ayraÃ§
//! ParÃ§aladÄ±ÄŸÄ± elemanlarÄ± bir diziye aktarÄ±r.


let metin1 = "Clarusway IT Bootcamp";

console.log(metin1.split(" "));

let parcalanmÄ±sMetim = metin1.split(" ");

console.log(parcalanmÄ±sMetim[1]);

for (let i = 0; i < parcalanmÄ±sMetim.length; i++) {
  if (parcalanmÄ±sMetim[i] === "IT") {
    console.log("Bu cÃ¼mlede IT kelimesi geÃ§iyor");
  }
}

console.log(metin1.split(""));

// Verilen tarih bilgisini gÃ¼n ay ve yÄ±l oalrak ayÄ±rma

let date = "11.11.2024";
let newDate = date.split(".");
console.log(newDate);
let gun = newDate[0];
let ay = newDate[1];
let yil = newDate[2];
console.log(gun);

let months =
  "Jan / Feb / Mar / Apr / May / Jun / Jul / Aug / Sep / Oct / Nov / Dec";

let newMonth = months.split(" / ");
console.log(newMonth);

/* -------------------------------------------------------------------------- */
/*                               //? Join metodu                              */
/* -------------------------------------------------------------------------- */
// String metodu deÄŸildir
// Javascript dilinde join metodu, biz dizi elemanÄ± string olarak birleÅŸtirir. Join metodu dizi (array) alarak bunu virgÃ¼l gibi bir karakter ile ayÄ±rarak string'e dÃ¶nÃ¼ÅŸtÃ¼rÃ¼r.

console.log(newMonth.join("_"))

/* -------------------------------------------------------------------------- */
//?                               Reverse Metodu                              */
/* -------------------------------------------------------------------------- */
// String metodu deÄŸildir
// reverse methodu ile bir diziyi tersine Ã§evirebilmekteyiz. Dizi iÃ§erisindeki ilk deÄŸeri son, Son deÄŸeri ise ilk sÄ±raya ÅŸeklinde sÄ±ralayabilmekteyiz.

// Bir kelimeyi tersten yazdÄ±ran program

let kelime1 = "Merhaba"
console.log(kelime1.split("").reverse().join(""))

let send = "yahÅŸi gÃ¼nde yar yahÅŸidir yaman gÃ¼nde yetiÅŸ gardaÅŸ"

console.log(send.split(" ").reverse().join(" "))

// Polindrom 
let kelime2 = "madam"

let mesaj = kelime2===kelime2.split("").reverse().join("") ? "Polindromdur" : "Polindrom deÄŸildir"

console.log(mesaj)

console.clear();

/* ---------------------------------- */
/*                Slice               */
/* ---------------------------------- */
//! Slice Metodu
//? String iÃ§inde bir bÃ¶lÃ¼mÃ¼ almak iÃ§in kullanÄ±lÄ±r.
// Slice(baÅŸlangÄ±Ã§ index numarasÄ±, bitiÅŸ index numarasÄ±(bu numara dahil deÄŸildir))

let sentence = "Merhaba cohort 18"

console.log(sentence.slice(0,7))
console.log(sentence.slice(8,14))

// negatif deÄŸer verilerek geriye doÄŸru deÄŸer verilebilir
console.log(sentence.slice(-3))
console.log(sentence.slice(-9,-3))


//Girilen sayÄ±nÄ±n tersini bulan fonsiyon 
let enterNumber = 6785;

// // const inverseOfNumber = (n) => {
// //     let concatNum;
// //     const inverse = n.toString().split("",)
// //     console.log(inverse.length);

// //     for (let i = inverse.length; i >= 0; i--) {
// //         concatNum += inverse[i];
// //     }
// //     return concatNum
// // }
// // console.log(+inverseOfNumber(enterNumber).slice(3));

/* ---------------------------------- */
/*              Substring             */
/* ---------------------------------- */
//! substring(baÅŸlangÄ±Ã§ index numarasÄ±,bitiÅŸ index numarasÄ±) 
//Slicedan farkÄ± negatif sayÄ± kullanÄ±lmaz


console.log(sentence.substring(0,7))
console.log(sentence.substring(-3,0))

/* ---------------------------------- */
/*               Substr               */
/* ---------------------------------- */
//! substr(baÅŸlangÄ±Ã§ index numarasÄ±,kaÃ§ adet karakter alÄ±nacaÄŸÄ±)


console.log(sentence.substr(8,6))

/* ---------------------------------- */
/*!   String iÃ§inde arama iÅŸlemleri   */
/* ---------------------------------- */

// includes, indexOf, search ,match  metodlarÄ±nÄ± kullanabiliriz

/* ---------------------------------- */
/*              includes              */
/* ---------------------------------- */

//? includes()   ... yÄ± iÃ§eriyor mu -> true yada false bir deÄŸer dÃ¶ndÃ¼rÃ¼r.
//? caseSensitive bir Ã¶zelliktir.

let kelime4 = "to be or not To be, That is The questions" 

console.log(kelime4.toUpperCase().includes("TO BE"))

//Bir site adresi gÃ¼venlimi deÄŸilmi kontrolÃ¼
// https : s secure

let url = "https://clarusway.com"

let msg = url.includes("https") ? "Bu site gÃ¼venlidir": "Bu site gÃ¼venli deÄŸildir"

console.log(msg)

/* ---------------------------------- */
/*               Ä°ndexOf              */
/* ---------------------------------- */
//? indexOf (aranacak metin, konum) Bir karakter yada karakter grubumun kaÃ§Ä±ncÄ± sÄ±rada olduÄŸunu yani index numarasÄ±nÄ± verir. EÄŸer o karakter yoksa olmadÄ±ÄŸÄ±nÄ± -1 deÄŸeri vererek gÃ¶sterir. BÃ¼yÃ¼k kÃ¼Ã§Ã¼k harfe duyarlÄ±dÄ±r. Sadece ilk gÃ¶rdÃ¼ÄŸÃ¼nÃ¼n index numarasÄ±nÄ± verir

console.log(kelime4.indexOf("be"))
//AradÄ±ÄŸÄ±mÄ±z kelime yoksa -1 dÃ¶ndÃ¼rÃ¼r
console.log(kelime4.indexOf("harvey"))

/* ---------------------------------- */
/*               search               */
/* ---------------------------------- */ 

//? search() bir string iÃ§indeki aranan elemanÄ±n ilk index numarsÄ±nÄ± yazar. Bulamazsa -1 dÃ¶nderir.
// BÃ¼yÃ¼k kÃ¼Ã§Ã¼k harfe duyarlÄ±dÄ±r. 

console.log(kelime4.search("be"))

//!REGEX- regular expression 
// Regex regular expression denir. BunlarÄ±n yazÄ±m stili / iÅŸaretiyledir.

// Flags KullanÄ±mÄ±
// DÃ¼zenli ifadelerde Ã§eÅŸitli bayraklar kullanarak aramayÄ± deÄŸiÅŸtirebiliriz:

// g : Global arama
// i : BÃ¼yÃ¼k/kÃ¼Ã§Ã¼k harf duyarsÄ±z arama

let variable = "HarveyWatson"
console.log(variable.search(/w/))

//[A-Z], [a-z] [0-9]

let kelime5 = "to be or not To be, 15 That is The questions" 
console.log(kelime5.search(/[A-Z]/))
console.log(kelime5.search(/[a-z]/))
console.log(kelime5.search(/[0-9]/))

// ^  olmayan
console.log(kelime5.search(/[^a-z]/))

/* ---------------------------------- */
/*                 match              */
/* ---------------------------------- */

//?match metodu, bir dize iÃ§indeki bir dÃ¼zenli ifadeye (RegEx) uyan kÄ±sÄ±mlarÄ± bulur ve bir dizi olarak dÃ¶ner.
// Bir dizi dÃ¶nderir

let phone= "My phone number is 123-456-7890";

let result = phone.match(/\d+/g)

console.log(result)

let text3 = "Contact us at support@example.com or sales@example.com";

let emailPattern = /[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}/g;


let emails = text3.match(emailPattern);
console.log(emails)

/* ---------------------------------- */
/* startsWith(), endsWith() -- case sensitive */
/* ---------------------------------- */

// startsWith :.. ile baÅŸlÄ±yormu (True , false)
// endsWith :.. ile baÅŸlÄ±yormu (True , false)

console.log(phone.startsWith("m"))
console.log(phone.endsWith("5"))

//!Stringde DeÄŸiÅŸiklik yapma 

/* ---------------------------------- */
/*         Replace -immutable         */
/* ---------------------------------- */

let text4 = "Hello World, Who are You World" 

let newText = text4.replace("World", "Javascript")
console.log(newText)

let newTextAll = text4.replaceAll("World", "Javascript")
console.log(newTextAll)

/* ---------------------------------- */
/*                Trim                */
/* ---------------------------------- */
//? baÅŸ ve sondaki boÅŸluklarÄ± kaldÄ±rmak iÃ§in => trim

let metin2= "   Clarusway    "
console.log(metin2)

let yeniMetin2 = metin2.trim()
console.log(yeniMetin2)

